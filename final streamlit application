import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression  # Corrected import
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# --- 1. Read the CSV file ---
try:
    df = pd.read_csv("C:/Users/Mogeeth.M/Downloads/powerpulse project/code/preprocessed_energy_data.csv")
except FileNotFoundError:
    st.error("Error: preprocessed_energy_data.csv not found at the specified path.")
    st.stop()

# --- 2. Display the data (optional) ---
st.subheader("Preprocessed Energy Data")
st.dataframe(df.head())  # Display the first few rows

# --- 3. Implement your prediction logic ---

st.subheader("Energy Consumption Prediction (Example - Linear Regression)")

# Assuming your CSV has columns like 'timestamp' and 'energy_consumption'
if 'timestamp' in df.columns and 'energy_consumption' in df.columns:
    # Convert timestamp to a numerical format (if needed for the model)
    # This is a simplified example; you might need more sophisticated feature engineering
    df['timestamp_numeric'] = pd.to_datetime(df['timestamp']).astype('int64') // 10**9

    X = df[['timestamp_numeric']]
    y = df['energy_consumption']

    # Split data for training and testing
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train a linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions on the test set
    predictions = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, predictions)
    st.write(f"Mean Squared Error on Test Set: {mse:.2f}")

    # --- 4. Display the predictions ---
    st.subheader("Predicted vs. Actual Energy Consumption (Test Set)")
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.scatter(X_test['timestamp'], y_test, color='blue', label='Actual')
    ax.scatter(X_test['timestamp'], predictions, color='red', label='Predicted')
    ax.set_xlabel("Timestamp")
    ax.set_ylabel("Energy Consumption")
    ax.legend()
    st.pyplot(fig)

else:
    st.warning("Ensure your CSV file has 'timestamp' and 'energy_consumption' columns for this example.")

# --- Add more prediction logic and visualizations as needed ---
